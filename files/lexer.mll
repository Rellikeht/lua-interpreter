{
open Parser (* This will be generated by Menhir *)
open Lexing

exception SyntaxError of string

let next_line lexbuf =
  let pos = lexbuf.lex_curr_p in
  lexbuf.lex_curr_p <-
    { pos with pos_bol = lexbuf.lex_curr_pos;
               pos_lnum = pos.pos_lnum + 1 }
}

let digit = ['0'-'9']
let alpha = ['a'-'z' 'A'-'Z' '_']
let whitespace = [' ' '\t']+
let newline = '\r' | '\n' | "\r\n"

rule token = parse
  | whitespace    { token lexbuf }
  | newline       { next_line lexbuf; token lexbuf }
  
  (* Keywords *)
  | "if"          { IF }
  | "then"        { THEN }
  | "else"        { ELSE }
  | "elseif"      { ELSEIF }
  | "end"         { END }
  | "do"          { DO }
  | "while"       { WHILE }
  | "for"         { FOR }
  | "in"          { IN }
  | "function"    { FUNCTION }
  | "local"       { LOCAL }
  | "return"      { RETURN }
  | "nil"         { NIL }
  | "true"        { TRUE }
  | "false"       { FALSE }
  | "and"         { AND }
  | "or"          { OR }
  | "not"         { NOT }
  
  (* Operators *)
  | "+"           { PLUS }
  | "-"           { MINUS }
  | "*"           { TIMES }
  | "/"           { DIVIDE }
  | "%"           { MODULO }
  | "^"           { POWER }
  | "=="          { EQUALS }
  | "~="          { NOT_EQUALS }
  | "<"           { LESS_THAN }
  | ">"           { GREATER_THAN }
  | "<="          { LESS_EQUAL }
  | ">="          { GREATER_EQUAL }
  
  (* Delimiters *)
  | "("           { LEFT_PAREN }
  | ")"           { RIGHT_PAREN }
  | "{"           { LEFT_BRACE }
  | "}"           { RIGHT_BRACE }
  | "["           { LEFT_BRACKET }
  | "]"           { RIGHT_BRACKET }
  | ","           { COMMA }
  | ";"           { SEMICOLON }
  | ":"           { COLON }
  | "."           { DOT }
  | "="           { ASSIGN }
  
  (* Identifiers and Literals *)
  | alpha (alpha | digit)* as name { NAME name }
  | digit+ ('.' digit*)? as num    { NUMBER (float_of_string num) }
  | '"' ([^'"']* as str) '"'       { STRING str }
  
  (* Vararg *)
  | "..."         { VARARG }
  
  (* Comments *)
  | "--"[^'\n']*  { token lexbuf }  (* Single-line comments *)
  
  (* End of file *)
  | eof           { EOF }
  
  (* Error handling *)
  | _ as unexpected { 
      raise (SyntaxError (
        Printf.sprintf "Unexpected character: %c" unexpected
      )) 
    }


